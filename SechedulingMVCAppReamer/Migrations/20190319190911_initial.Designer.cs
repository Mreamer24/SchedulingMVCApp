// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SechedulingMVCAppReamer.Data;
using System;

namespace SechedulingMVCAppReamer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190319190911_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.ConflictCourse", b =>
                {
                    b.Property<int>("ConflictCourseID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConflictedCourseID");

                    b.Property<int>("CourseID");

                    b.HasKey("ConflictCourseID");

                    b.HasIndex("ConflictedCourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("ConflictCourses");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<string>("CourseNumber")
                        .IsRequired();

                    b.Property<int>("DepartmentID");

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.CourseOffering", b =>
                {
                    b.Property<int>("CourseOfferingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CRN");

                    b.Property<int>("CourseID");

                    b.Property<string>("Days");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EndTime");

                    b.Property<int?>("InstructorID");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("CourseOfferingID");

                    b.HasIndex("CourseID");

                    b.HasIndex("InstructorID");

                    b.ToTable("CourseOfferings");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.CourseOfferingChanges", b =>
                {
                    b.Property<int>("CourseOfferingChangesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CRN");

                    b.Property<string>("ChangeType");

                    b.Property<string>("ChangersName");

                    b.Property<string>("ChangersRole");

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("DateChanged");

                    b.Property<string>("Days");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EndTime");

                    b.Property<int?>("InstructorID");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("CourseOfferingChangesID");

                    b.HasIndex("CourseID");

                    b.HasIndex("InstructorID");

                    b.ToTable("CourseOfferingChanges");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentChairID");

                    b.Property<string>("DepartmentName")
                        .IsRequired();

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentChairID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentID");

                    b.Property<string>("InstructorEmail")
                        .IsRequired();

                    b.Property<string>("InstructorFirstName")
                        .IsRequired();

                    b.Property<string>("InstructorLastName")
                        .IsRequired();

                    b.HasKey("InstructorID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.TeachingQualification", b =>
                {
                    b.Property<int>("TeachingQualificationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseID");

                    b.Property<int?>("DepartmentID");

                    b.Property<int>("InstructorID");

                    b.HasKey("TeachingQualificationID");

                    b.HasIndex("CourseID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("TeachingQualifications");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.DepartmentChair", b =>
                {
                    b.HasBaseType("SechedulingMVCAppReamer.Models.ApplicationUser");

                    b.Property<string>("DepartmentChairID");

                    b.Property<int>("DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("DepartmentChair");

                    b.HasDiscriminator().HasValue("DepartmentChair");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SechedulingMVCAppReamer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.ConflictCourse", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.ConflictCourse", "conflictedCourse")
                        .WithMany()
                        .HasForeignKey("ConflictedCourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SechedulingMVCAppReamer.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.Course", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.CourseOffering", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.Course", "Course")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SechedulingMVCAppReamer.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.CourseOfferingChanges", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SechedulingMVCAppReamer.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.Department", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.DepartmentChair", "DepartmentChair")
                        .WithMany()
                        .HasForeignKey("DepartmentChairID");
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.Instructor", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.TeachingQualification", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SechedulingMVCAppReamer.Models.Course")
                        .WithMany("QualifiedInstructors")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("SechedulingMVCAppReamer.Models.Instructor", "Instructor")
                        .WithMany("QualifiedCourses")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SechedulingMVCAppReamer.Models.DepartmentChair", b =>
                {
                    b.HasOne("SechedulingMVCAppReamer.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
